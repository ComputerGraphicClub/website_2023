{"mappings":"AAAA,MAAM;IACF;;KAEC,GACD,CAAC,eAAe,GAAG;QACf,IAAQ;YAAC,KAAK;YAAI,UAAU,KAAK;YAAE,cAAc;QAAS;QAC1D,KAAQ;YAAC,KAAK;YAAI,UAAU,KAAK;YAAE,cAAc;QAAS;QAC1D,OAAQ;YAAC,KAAK;YAAI,UAAU,KAAK;YAAE,cAAc;QAAS;QAC1D,MAAQ;YAAC,KAAK;YAAI,UAAU,KAAK;YAAE,cAAc;QAAS;IAC9D,EAAC;IAED,2BAA2B,GAC3B,CAAC,gBAAgB,CAAA;IAEjB;;KAEC,GACD,YAAY,EAAC,iBAAgB,EAAC,CAAE;QAC5B,IAAI,CAAC,CAAC,gBAAgB,GAAG;QAEzB,8EAA8E;QAC9E,mDAAmD;QACnD,MAAM,eAAe,IAAI,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC;QAEvE,IAAG,aAAa,MAAM,KAAK,GAAG,QAAQ,KAAK,CAAC;QAE5C,IAAI,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,GAAG,GAAS,YAAY,CAAC,EAAE;QACpD,IAAI,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,GAAQ,YAAY,CAAC,EAAE;QACpD,IAAI,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,GAAM,YAAY,CAAC,EAAE;QACpD,IAAI,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,GAAO,IAAI,CAAC,CAAC,gBAAgB,CAAC,GAAG;IACnE;IAEA;;;KAGC,GACD,UAAU,EAAC,kBAAiB,EAAC,EAAE;QAE3B,4EAA4E,GAC5E,MAAM,mBAAmB,IAAI,CAAC,CAAC,eAAe,CAAC,kBAAkB;QAEjE,IAAG,iBAAiB,YAAY,KAAK,aAAa,iBAAiB,QAAQ,EAAE;QAE7E,iBAAiB,YAAY,GAAG,IAAM;YAClC,iBAAiB,QAAQ,GAAG,IAAI;YAChC,IAAI,CAAC,CAAC,gBAAgB,CAAC,GAAG,GAAG,iBAAiB,GAAG;YACjD,iBAAiB,QAAQ,GAAG,IAAI;YAChC,IAAI,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC;YACrC,QAAQ,IAAI,CAAC,IAAI,EAAE;QACvB;QAEA,MAAM,uBAAuB,IAAI;QACjC,qBAAqB,GAAG,GAAG,iBAAiB,GAAG;QAC/C,qBAAqB,gBAAgB,CAAC,QAAQ,iBAAiB,YAAY;IAC/E;AACJ","sources":["js/ImageLazyLoad.js"],"sourcesContent":["class ImageLazyLoad {\n    /**\n     * @type {{small: {loadListener: * | EventListener, isLoaded: boolean, url: string}, xl: {loadListener: * | EventListener, isLoaded: boolean, url: string}, reg: {loadListener: * | EventListener, isLoaded: boolean, url: string}, tiny: {loadListener: * | EventListener, isLoaded: boolean, url: string}}}\n     */\n    #listOfImageData = {\n        xl:     {url: '', isLoaded: false, loadListener: undefined},\n        reg:    {url: '', isLoaded: false, loadListener: undefined},\n        small:  {url: '', isLoaded: false, loadListener: undefined},\n        tiny:   {url: '', isLoaded: false, loadListener: undefined},\n    }\n\n    /**@type {HTMLImageElement}*/\n    #htmlImageElement\n\n    /**\n     * @param {HTMLImageElement} htmlImageElement\n     */\n    constructor({htmlImageElement}) {\n        this.#htmlImageElement = htmlImageElement\n\n        // data-lazyloadurls html attribute must be composed with 3 url of image size:\n        // [url image small],[url image reg],[url image xl]\n        const lazyLoadUrls = this.#htmlImageElement.dataset.lazyloadurls.split(',')\n\n        if(lazyLoadUrls.length !== 3) console.error('data-lazyloadurls html attribute must be composed with 3 url of image size: \\n\\t[url image small],[url image reg],[url image xl]')\n\n        this.#listOfImageData.xl.url       = lazyLoadUrls[2]\n        this.#listOfImageData.reg.url      = lazyLoadUrls[1]\n        this.#listOfImageData.small.url    = lazyLoadUrls[0]\n        this.#listOfImageData.tiny.url     = this.#htmlImageElement.src\n    }\n\n    /**\n     *\n     * @param {'xl'|'reg'|'small'|'tiny'} sizeOfImageToLoad\n     */\n    loadImage({sizeOfImageToLoad}) {\n\n        /**@type {{loadListener: * | EventListener, isLoaded: boolean, url: string}}*/\n        const currentImageData = this.#listOfImageData[sizeOfImageToLoad]\n\n        if(currentImageData.loadListener !== undefined || currentImageData.isLoaded) return\n\n        currentImageData.loadListener = () => {\n            currentImageData.isLoaded = true\n            this.#htmlImageElement.src = currentImageData.url\n            currentImageData.isLoaded = true\n            this.#htmlImageElement.classList.add('is-loaded')\n            console.info(this, 'is loaded')\n        }\n\n        const imageForLoadingEvent = new Image()\n        imageForLoadingEvent.src = currentImageData.url\n        imageForLoadingEvent.addEventListener('load', currentImageData.loadListener)\n    }\n}"],"names":[],"version":3,"file":"index.dfbbfd2f.js.map","sourceRoot":"/__parcel_source_root/"}